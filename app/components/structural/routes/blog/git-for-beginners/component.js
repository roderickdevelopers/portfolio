import Component from '@glimmer/component';

export default class StructuralRoutesGitForBeginnersRouteComponent extends Component {
  gitCodePathOne = '~/your/file/path/to/yourproject [master]';
  gitCodeOne = '$ git status';
  gitCodePathTwo = '~/your/file/path/to/yourproject [master] git branch';
  gitCodeTwo = '* master';
  paragraphOne = 'Git commands take a while to get used to. When you first begin you’ll make many mistakes.  It’s normal. It’s expected. It would be weird if you didn’t and frankly, after making these mistakes ourselves as new developers, we’d find it kind of annoying if you just magically understood git!  Struggle is good. It makes you a better developer.';
  paragraphTwo = 'We all stumble with git. Even experienced developers find themselves on the terminal command line and just go blank.  What was that command again?  What am I even doing right now?  Git is hard.  Or it can be when it wants to be.  How do you push your local changes correctly to your GitHub site?  How do you commit them and write commit messages? What is the difference between your local stuff and GitHub? What do you mean, there are two things called master(main now) and they are the same but not the same? Git is intimidating. You’ve managed to get your code through this difficult, long, tiring and uplifting incubation period but now that you have to push it (whatever that means), it feels like all that hard work and solid code is made of glass. Things are written! Look! You can see it on the browser and it works! And you want me to do WHAT with it? It feels like typing the wrong command will DESTROY that delicate and sometimes frustrating process and it will be all for naught. And it might. Just kidding.  Kind of.';
  paragraphThree = 'These are the essential and bare-bones commands for getting used to Git.  There are many more, but these should get you started and allow you to feel comfortable enough to realize that your code is strong! It doesn’t suddenly turn to glass because you need to share it outside of the safety of your laptop. These commands represent the ones that we find ourselves using on a regular basis, and we’ve explained them in as much detail as we can without making them overly complicated.';
  paragraphFour = 'Our hope is that this will help any new developers when working on their portfolio or projects.  Think of Git as a bike messenger.  It simply brings things that you want to you, and delivers things that other people want from you.  You wouldn’t be afraid of a bike messenger would you?  Bringing you pizza and cookies and paychecks and packages and other….fun, recreational things?  Don’t be afraid of Git.  Answer the door when it knocks, call it up when you need something delivered.  Use it.';
  paragraphFive = '#1 is: DO NOT WORK DIRECTLY ON MASTER!  Checkout a separate branch for every new feature, then merge that branch back into master, then create a new feature branch from the updated master.  Every time.';
  paragraphSix = '#2 is: DO NOT WORK DIRECTLY ON MASTER!  Checkout a separate branch for every new feature, then merge that branch back into master, then create a new feature branch from the updated master.  Every time.';
  paragraphSeven = '#3 is: DO NOT WORK DIRECTLY ON MASTER!  Checkout a separate branch for every new feature, then merge that branch back into master, then create a new feature branch from the updated master.  Every time.';
  paragraphEight = '\‘Feature\’ branch: This means any branch other than master.  You create these branches from master.  They can be named anything, but are usually named for the ‘feature’ that you are trying to implement.  I.E. ‘add_header’.  This would show that you are now in a branch called [add_header], and most likely, you would be doing the work of adding a header to your app.  If you complete the ‘feature’ branch that you’re on (as in, you’ve completed coding the header), you merge it into master (described below) and then make a new branch from the updated master, perhaps called ‘add_footer’, in which you\'d be adding a footer.  Get it?';
  paragraphNine = 'Local branch vs Non-local branch: Local branch means the branch on your computer. It is a general term for ANY branch whose files are located on your computer.  Non-local branch means a branch not located on your computer. There are (or can be) TWO copies of the same branch. One is local (on your computer) and one is NON-local (on GitHub).  They are not always synced though, in fact, 99% of the time they are out of sync.  That’s because you are working on the code in your local branch, thus making it different from the one on Github.';
  paragraphTen = 'Imagine that you have some crayons and two pictures to color, laid out side by side, maybe a landscape for this example. The pictures are exactly the same, right down to the page number in the bottom corner.  One is your local, one is your non-local.  You do work on your local picture (branch).  To do this, you begin coloring the sky in blue.  You do a pretty good job, you’re proud of it.  In fact, that’s the best damned sky you’ve ever seen, and you did it!  But you start to think, ‘What if someone spills a drink on it? Or my dog chews it up?’. So you want to save that blue sky in a copy somewhere in case this one gets ruined. But look! You have an extra copy right here. The sky isn’t blue, but you can fix that by pushing your work (coloring the sky) into that copy and you can lock it away in a vault where no one can spill a drink on it and your dog doesn\'t have thumbs so he can’t get into the vault and chew it up. You’d have a safe copy of that picture, exactly as it is right now, with the blue sky and the page number and everything else. So that’s what you do. You update that non-local copy (the plain one) with the work that you did to your local copy (by committing the changes and pushing them) and you lock it away in the vault (GitHub).';
  paragraphEleven = 'These two branches exist independently of each other.  They are the same but different.  Until you update the non-local version with the changes you made on your local version, you have two branches that are out of sync.  Maybe you start coloring in the trees but don’t push those new changes to your non-local branch, or you accidentally delete the blue sky and don’t remember which shade you used and you need it to match because it was so perfect!  Keep them in sync when possible.  That way, when something goes wrong, which it will someday at some point, it really will, you can just go onto your non-local copy (GitHub) and easily repair the local copy back to its former glory.';
  paragraphTwelve = 'Your BEST FRIEND on the terminal line is git status. This shows you where you are currently with respect to your files.  It’s invaluable.  When in doubt, type ‘git status’. It does not affect your files in any way, it’s just a tool to look at them.  It will never have an adverse effect.';
  paragraphThirteen = 'git status'
  paragraphFourteen = 'This will spit out something that looks like this:';
  articleTitle = 'Git For Beginners';
  gitHeaderOne = '3 Rules for Beginners:';
  gitHeaderTwo = 'COMMON DEFINITIONS:';
  gitHeaderThree = 'COMMANDS:';
  gitHeaderFour = 'Step 1:';
  gitImageOne = '/assets/images/gitstatusoutput.png'
}