<div local-class="emm_article_component_container">
  <div local-class="emm_article_header_container">
    <div local-class="emm_article_header">
      <h1>Ember-Mobile-Menu Setup</h1>
      <p>Written by <a href="https://www.roderickdevelopers.com/" target="_blank" rel="noopener noreferrer">Roderick Developers</a> & <a
          href="https://www.designmonster.com/" target="_blank" rel="noopener noreferrer">Design Monster</a></p>
      <p>Created By: <a href="https://github.com/nickschot" target="_blank" rel="noopener noreferrer">Nick Schot</a></p>
      <p>Find it <a href="https://nickschot.github.io/ember-mobile-menu/" target="_blank" rel="noopener noreferrer">HERE</a></p>
    </div>
  </div>
  <div local-class="emm_article_content_container">
    <div local-class="emm_article_content">
      <p> In this post, we will show you how to use ember-mobile-menu, the issues that we overcame in setting it up, and
        the final implementation, with real-world code examples. Let's preface this by saying that we are both Junior
        Developers, not inexperienced, but certainly not gurus. We have spent the last few years learning HTML, CSS, and
        JavaScript (and are currently looking for our first entry-level positions!) We love Ember, but have experience
        with React as well.
      </p>
      <p> We'll take you through our attempts, show you what not to do, and show you what we did to actually make it
        work correctly. We didn't do this on our own. Something that sets the Ember community apart from others is that
        you can almost always speak directly with the authors of an add-on, asking questions through Discord and working
        through your code. When we got stuck, we messaged the very helpful developer of this add-on Nick Schot, who gave
        us some much-needed guidance in the right direction.
      </p>
      <p> We are using Ember Octane 3.21. This is for a simple portfolio site. We wanted a way to implement a
        user-friendly mobile menu that was capable of swipe gesturing, and we wanted one that we didn't need to spend
        weeks building. Enter Ember-Mobile-Menu.
      </p>
      <h1>1st Attempt:</h1>
      <p>On our first attempt, we decided that we wanted to make the ember-mobile-menu into its own component. Our
        understanding of how the add-on worked was flawed at this point, but we didn't know that. The basic idea was
        that we could break it out into its own component and place it in the header component, which weâ€™d then call in
        each of our routes. It seemed simple enough. And this did work, but we had to have overrides for the SCSS for it
        to work even close to "correctly".</p>
      <p>We asked ourselves, should we be doing this? The answer was a quick NO! When using an add-on, if you find
        yourself overriding all kinds of CSS to make it work like you need it to, take a step back and rethink your
        approach. The author wrote this code to work, not to give you headaches. That is not to say that overriding some
        styles is not necessary sometimes, but it should not be necessary all the time.
      </p>
      <p>The overrides also made it so that when you click out of the menu the scrolling stopped on our site because it
        set overflow: hidden; to the body. This is intended behavior on the part of the add-on. When the menu is open,
        it should turn scrolling off on the body behind it, or the user would scroll through the underlying content,
        which meant that when the user clicked out of the mobile-menu, they would end up in a random spot on the main
        page. That is not good. We also initially tried wrapping it in a flex container and it broke everything. Do not
        wrap it in a flex container!
      </p>
      <h1>2nd Attempt:</h1>
      <p> So after contacting the developer via discord, we troubleshot some things, and he told us that having it in
        all our routes separately was not the correct way to use this add-on. As a beginner, this was not immediately
        clear to us in the documentation. We had understood that we needed it "high up in the DOM", as per his
        instructions, but we did not understand what that meant exactly. So what is "high in the Dom"?';
      </p>
      <p> Again, we are Junior Developers. We knew the term, but try googling it. Not much that is useful comes up, and
        our understanding of it was lacking, therefore our understanding of the documentation for mobile-menu was
        incorrect.
      </p>
      <p> We kept the add-on itself as a component, figuring that gave us the most flexibility in using it. Knowing that
        we could not place it individually in each route, we turned to the application ROUTE template, which, in Ember,
        gives you a place to put code that exists across all routes.
      </p>
      <p> This sort of worked. But not really. The menu was not behaving as it should and was not displaying on the site
        as intended.
      </p>
      <h1>3rd Attempt:</h1>
      <p> Contacting the developer again, we had shown him how it was behaving. Nick had asked if all of our website
        content was inside MMS Content. We did not understand what he had meant at that time. Again, it is not as if we
        were not using the guides, we simply had a fundamental misunderstanding of what they were telling us to. So we
        looked at several real-world examples by following the GitHub tab "Used By" on the right-hand side of the repo
        page for ember-mobile-menu. This is an excellent thing to remember for both new coders and experienced coders
        alike. By looking at how others have implemented this code, it can start to give you an idea of how to approach
        and use it in your projects. Even though it is incredible that you can contact the ember add-on owners directly,
        they are not going to write your code for you, and you will need to figure some things out on your own. Seeing
        how others had used it gave us a much better understanding of how we should be implementing this add-on and all
        of its content.
      </p>
      <h1>4th and Final Attempt:</h1>
      <p> We figured that this could be accomplished in a few different ways. One would be to simply have the code of
        mobile-menu in your application ROUTE template like so, placing your \{{outlet}} inside:
      </p>
      <div local-class="emm_code_content">
        <p>
          {{this.codePathThree}}<br>&nbsp;&nbsp;&nbsp;{{this.codePathFour}}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{this.codePathFive}}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
          This is where the Ui for the actual menu would
          go.<br>&nbsp;&nbsp;&nbsp;{{this.codePathSix}}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;{{this.codePathSeven}}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{this.codePathEight}}<span
            local-class="code_output"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{this.codeTwoOutlet}}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;{{this.codePathNine}}<br>{{this.codePathTen}}
        </p>
      </div>
      <p> Which worked! The mobile-menu now does exactly what it is supposed to do! At this point, you can stop and use
        this setup if you would like, but that takes mobile-menu out of component form.
      </p>
      <p> However, we want the ember-mobile menu to be in component form, which is then passed to the application route
        template. We want it this way because we have a strict rule that ROUTE templates should not contain ANY HTML,
        and thus should not contain any CSS. That's just our structural set up, and we find that it keeps things
        organized. Only components contain HTML and CSS, the ROUTE templates are simply where you call a component and
        pass data. So, we still had the component that we had broken it out into earlier, located in the component
        folder -> Structural::Ui::Navigation::Mobile. We simply call that component in block form in the application
        route template, making sure to put the \{{outlet}} inside the blocks:
      </p>
      <div local-class="emm_code_content">
        <p>{{this.codePathTwo}}<br><span local-class="code_output">{{this.codeTwoOutlet}}</span><br>{{this.codePathTwo}}
        </p>
      </div>
      <p> And then in the component itself, we add the \{{yield}} to the CONTENT section that already exists within the
        ember-mobile-menu:
      </p>
      <div local-class="emm_code_content">
        <p>
          {{this.codePathThree}}<br>&nbsp;&nbsp;&nbsp;{{this.codePathFour}}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{this.codePathFive}}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
          This is where the Ui for the actual menu would
          go.<br>&nbsp;&nbsp;&nbsp;{{this.codePathSix}}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;{{this.codePathSeven}}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{this.codePathEight}}<span
            local-class="code_output"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{this.codeEightOutlet}}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;{{this.codePathNine}}<br>{{this.codePathTen}}
        </p>
      </div>
      <p> Success! We now have ember-mobile-menu working, with the set up we prefer! If you don't understand the
        \{{yield}} part, please refer to the docs <a
          href="https://guides.emberjs.com/release/components/block-content/" target="_blank" rel="noopener noreferrer">HERE</a>. It is an incredibly useful thing
        to use, though I admittedly don't understand much myself beyond the basic things that you can do with it. In the
        future, named blocks will be a thing, and although they are a bit confusing, it looks like their potential will
        be huge.
      </p>
      <p> So we've explained two ways that you can set it up yourself. One directly in the application route template,
        and one by putting ember-mobile-menu in its own component, and then calling that component in block form inside
        the application route template.
      </p>
      <p> We had one more problem, which was that we only want the mobile menu to show up on small and medium-sized
        screens, as defined in our breakpoints. It is, after all, a mobile menu. Although <a href="https://www.roderickdevelopers.com/" target="_blank" rel="noopener noreferrer">Roderick Developers</a> does use it
        successfully on all screens on his portfolio and it looks great actually.
      </p>
      <p> To accomplish this we used ember-responsive, in combination with ember-truth-helpers (which is included with
        any new Octane App!) and write it like this:
      </p>
      <div local-class="emm_code_content">
        <p>
          &nbsp;&nbsp;&nbsp;&nbsp;{{this.codePathEleven}}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{this.codePathTwelve}}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span
            local-class="code_output">{{this.codeTwoOutlet}}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{this.codePathThirteen}}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{this.codePathFourteen}}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span
            local-class="code_output">{{this.codeTwoOutlet}}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{this.codePathFifteen}}
        </p>
      </div>
      <p> And that's it! We now have ember-mobile-menu set up, with breakpoints controlling which device size it renders
        on. We've hoped this article has helped. Try out the add-on, it's very well made and easy to use.
      </p>
    </div>
  </div>
  <div local-class="back_to_top_button_container">
    <Dynamic::Ui::Buttons::BackToTop @backToTop={{this.backToTop}} />
  </div>
</div>